[tool.ruff]
target-version = "py310"
extend-include = ["*.ipynb"]

[tool.ruff.format]
preview = true
docstring-code-format = true
docstring-code-line-length = 20

[tool.ruff.lint]
preview = true
select = [
    "E4",
    "E7",
    "E9",
    "W291",
    "YTT",
    "T10",
    "ICN",
    "INP",
    "Q",
    "RSE",
    "SLOT",
    "INT",
    "FLY",
    "LOG",
    "C90",
    "T20",
    "D",
    "RET",
    "PD",
    "N",
    "PIE",
    "SIM",
    "S",
    "G",
    "ERA",
    "ASYNC",
    "TID",
    "UP",
    "SLF",
    "BLE",
    "C4",
    "I",
    "F",
    "A",
    "ARG",
    "PTH",
    "RUF",
    "B",
    "TCH",
    "DTZ",
    "PYI",
    "PT",
    "EM",
    "TRY",
    "PERF",
    "CPY",
    # "FBT", # use named arguments for boolean flags
    # "TD", # todos
    # "FIX", # fixme
    # "FURB" # preview rules
    # ANN # Type annotations, re-enable when we get bandwidth
]
ignore = [
    # Ignore module names shadowing Python builtins
    "A005",
    # Conflicts with interface argument checking
    "ARG002",
    "ANN204",
    # TODO: Inspect these pandas rules for validity
    "PD002", # prevents inplace=True
    # TODO RE-Enable when we get bandwidth
    "PERF203", # Needs restructuring of errors, we should bail-out on first error
    "C901",    # needs refactoring to remove cyclomatic complexity
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S", "D", "ANN", "T201", "ASYNC", "ARG", "PTH", "TRY"]
"graphrag/index/config/*" = ["TCH"]
"*.ipynb" = ["T201"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["input", "id", "bytes"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

# https://github.com/microsoft/pyright/blob/9f81564a4685ff5c55edd3959f9b39030f590b2f/docs/configuration.md#sample-pyprojecttoml-file
[tool.pyright]
include = ["graphrag", "tests", "examples_notebooks"]
exclude = ["**/node_modules", "**/__pycache__"]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
timeout = 1000
env_files = [".env"]

[tool.uv]
dev-dependencies = [
    "pyright>=1.1.392.post0",
    "pytest>=8.3.4",
    "ruff>=0.9.2",
]

[project]
authors = [
    {name = "Alonso Guevara Fernández", email = "alonsog@microsoft.com"},
    {name = "Andrés Morales Esquivel", email = "andresmor@microsoft.com"},
    {name = "Chris Trevino", email = "chtrevin@microsoft.com"},
    {name = "David Tittsworth", email = "datittsw@microsoft.com"},
    {name = "Dayenne de Souza", email = "ddesouza@microsoft.com"},
    {name = "Derek Worthen", email = "deworthe@microsoft.com"},
    {name = "Gaudy Blanco Meneses", email = "gaudyb@microsoft.com"},
    {name = "Ha Trinh", email = "trinhha@microsoft.com"},
    {name = "Jonathan Larson", email = "jolarso@microsoft.com"},
    {name = "Josh Bradley", email = "joshbradley@microsoft.com"},
    {name = "Kate Lytvynets", email = "kalytv@microsoft.com"},
    {name = "Kenny Zhang", email = "zhangken@microsoft.com"},
    {name = "Mónica Carvajal"},
    {name = "Nathan Evans", email = "naevans@microsoft.com"},
    {name = "Rodrigo Racanicci", email = "rracanicci@microsoft.com"},
    {name = "Sarah Smith", email = "smithsarah@microsoft.com"},
]
license = {text = "MIT"}
requires-python = "<3.13,>=3.10"
dependencies = [
    "environs<12.0.0,>=11.0.0",
    "azure-search-documents<12.0.0,>=11.5.2",
    "lancedb<1.0.0,>=0.17.0",
    "aiofiles<25.0.0,>=24.1.0",
    "openai<2.0.0,>=1.57.0",
    "nltk==3.9.1",
    "tiktoken<1.0.0,>=0.8.0",
    "numpy<2.0.0,>=1.25.2",
    "graspologic<4.0.0,>=3.4.1",
    "networkx<4.0.0,>=3.4.2",
    "pandas<3.0.0,>=2.2.3",
    "matplotlib<4.0.0,>=3.9.3",
    "pyarrow<16.0.0,>=15.0.0",
    "umap-learn<1.0.0,>=0.5.6",
    "pyyaml<7.0.0,>=6.0.2",
    "pyaml-env<2.0.0,>=1.2.1",
    "python-dotenv<2.0.0,>=1.0.1",
    "pydantic<3.0.0,>=2.10.3",
    "rich<14.0.0,>=13.9.4",
    "devtools<1.0.0,>=0.12.2",
    "typing-extensions<5.0.0,>=4.12.2",
    "azure-cosmos<5.0.0,>=4.9.0",
    "azure-identity<2.0.0,>=1.19.0",
    "azure-storage-blob<13.0.0,>=12.24.0",
    "future<2.0.0,>=1.0.0",
    "typer<1.0.0,>=0.15.1",
    "fnllm<1.0.0,>=0.0.10",
    "tenacity<10.0.0,>=9.0.0",
    "json-repair<1.0.0,>=0.30.3",
    "tqdm<5.0.0,>=4.67.1",
    "httpx<1.0.0,>=0.28.1",
]
name = "graphrag"
version = "1.1.2"
description = "GraphRAG: A graph-based retrieval-augmented generation (RAG) system."
readme = "README.md"

[project.urls]
Source = "https://github.com/microsoft/graphrag"

[project.scripts]
graphrag = "graphrag.cli.main:app"

[dependency-groups]
dev = [
    "coverage<8.0.0,>=7.6.9",
    "ipykernel<7.0.0,>=6.29.5",
    "jupyter<2.0.0,>=1.1.1",
    "nbconvert<8.0.0,>=7.16.4",
    "poethepoet<1.0.0,>=0.31.1",
    "pyright<2.0.0,>=1.1.390",
    "pytest<9.0.0,>=8.3.4",
    "pytest-asyncio<1.0.0,>=0.24.0",
    "pytest-timeout<3.0.0,>=2.3.1",
    "ruff<1.0.0,>=0.8.2",
    "semversioner<3.0.0,>=2.0.5",
    "update-toml<1.0.0,>=0.2.1",
    "deptry<1.0.0,>=0.21.1",
    "mkdocs-material<10.0.0,>=9.5.48",
    "mkdocs-jupyter<1.0.0,>=0.25.1",
    "mkdocs-exclude-search<1.0.0,>=0.6.6",
    "pytest-dotenv<1.0.0,>=0.5.2",
    "mkdocs-typer<1.0.0,>=0.0.3",
]
